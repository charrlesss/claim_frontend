{"version":3,"file":"static/js/526.0c8ad59b.chunk.js","mappings":"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","sources":["Component/DataGridViewReact.tsx","Lib/confirmationAlert.ts","Lib/validateDate.ts","Component/UpwardFields.tsx"],"sourcesContent":["import {\r\n  useState,\r\n  useRef,\r\n  forwardRef,\r\n  useEffect,\r\n  useImperativeHandle,\r\n  useContext,\r\n} from \"react\";\r\nimport SearchIcon from \"@mui/icons-material/Search\";\r\nimport { TextInput } from \"./UpwardFields\";\r\nimport { wait } from \"../Lib/wait\";\r\nimport CloseIcon from \"@mui/icons-material/Close\";\r\nimport { Loading } from \"./Loading\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { UserContext } from \"../App\";\r\n\r\nexport const DataGridViewReact = forwardRef(\r\n  (\r\n    {\r\n      columns,\r\n      rows = [],\r\n      height = \"400px\",\r\n      getSelectedItem,\r\n      onKeyDown,\r\n      disbaleTable = false,\r\n      isTableSelectable: _isTableSelectable = true,\r\n      containerStyle,\r\n      focusElementOnMaxTop,\r\n      ActionComponent = () => <></>,\r\n      showSequence = false,\r\n    }: any,\r\n    ref\r\n  ) => {\r\n    const parentElementRef = useRef<any>(null);\r\n    const actionModalRef = useRef<any>(null);\r\n    const checkboxRef = useRef([]);\r\n    const tbodyRef = useRef<HTMLTableSectionElement>(null);\r\n    const [data, setData] = useState([]);\r\n    const [column, setColumn] = useState([]);\r\n    const [selectedRow, setSelectedRow] = useState<any>(0);\r\n    const [selectedRowIndex, setSelectedRowIndex] = useState<any>(null);\r\n    const totalRowWidth = column.reduce((a: any, b: any) => a + b.width, 0);\r\n    const [isTableSelectable, setIsTableSelectable] =\r\n      useState(_isTableSelectable);\r\n\r\n    const [columnHeader, setColumnHeader] = useState(\r\n      columns.filter((itm: any) => !itm.hide)\r\n    );\r\n    const [hoveredColumn, setHoveredColumn] = useState(null);\r\n\r\n    useEffect(() => {\r\n      if (columns.length > 0) {\r\n        setColumn(columns.filter((itm: any) => !itm.hide));\r\n      }\r\n    }, [columns]);\r\n\r\n    useImperativeHandle(ref, () => ({\r\n      checkNoIsExist: (checkNo: string) => {\r\n        return data.some((subArray: any) => subArray[2] === checkNo);\r\n      },\r\n      selectedRow: () => selectedRow,\r\n      getData: () => {\r\n        const newData = [...data];\r\n        return newData;\r\n      },\r\n      setData: (newData: any) => {\r\n        setData(newData);\r\n      },\r\n      getColumns: () => {\r\n        return columns;\r\n      },\r\n      resetTable: () => {\r\n        setData([]);\r\n        setSelectedRow(0);\r\n        setSelectedRowIndex(null);\r\n      },\r\n      getSelectedRow: () => {\r\n        return selectedRowIndex;\r\n      },\r\n      setSelectedRow: (value: any) => {\r\n        return setSelectedRowIndex(value);\r\n      },\r\n\r\n      resetCheckBox: () => {\r\n        return handleResetCheckBox();\r\n      },\r\n      _setSelectedRow: (value: any) => {\r\n        return setSelectedRow(value);\r\n      },\r\n      setIsTableSelectable: (param: boolean) => {\r\n        setIsTableSelectable(param);\r\n      },\r\n      setDataFormated: (newData: any) => {\r\n        setData(\r\n          newData.map((itm: any) => {\r\n            return columns.map((col: any) => itm[col.key]);\r\n          })\r\n        );\r\n      },\r\n      getDataFormatted: () => {\r\n        const newData = [...data];\r\n        const newDataFormatted = newData.map((itm: any) => {\r\n          let newItm = {\r\n            Check_No: itm[0],\r\n            Check_Date: itm[1],\r\n            Check_Amnt: itm[2],\r\n            BankName: itm[3],\r\n            Branch: itm[4],\r\n            Check_Remarks: itm[5],\r\n            Deposit_Slip: itm[6],\r\n            DateDeposit: itm[7],\r\n            OR_No: itm[8],\r\n            BankCode: itm[9],\r\n          };\r\n          return newItm;\r\n        });\r\n\r\n        return newDataFormatted;\r\n      },\r\n      getElementBody: () => tbodyRef.current,\r\n      getParentElement: () => parentElementRef.current,\r\n    }));\r\n    const handleResetCheckBox = () => {\r\n      checkboxRef.current.forEach((checkbox: HTMLInputElement, idx: any) => {\r\n        if (checkbox) checkbox.checked = false;\r\n      });\r\n    };\r\n    const handleResetCheckBoxByIndex = (_idx: any) => {\r\n      checkboxRef.current.forEach((checkbox: HTMLInputElement, idx: any) => {\r\n        if (_idx === idx) {\r\n          return;\r\n        } else {\r\n          if (checkbox) checkbox.checked = false;\r\n        }\r\n      });\r\n    };\r\n    const handleRightClick = (event: any, idx: number) => {\r\n      event.preventDefault(); // Prevent the default context menu from appearing\r\n      if (idx === selectedRowIndex) {\r\n        actionModalRef.current.showModal();\r\n      }\r\n    };\r\n    const startResize = (index: any, e: any) => {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n\r\n      const startX = e.clientX;\r\n      const startWidth = columnHeader[index].width;\r\n\r\n      const doDrag = (moveEvent: any) => {\r\n        const newWidth = startWidth + (moveEvent.clientX - startX);\r\n        const updatedColumns = [...columnHeader];\r\n        updatedColumns[index].width = newWidth > 50 ? newWidth : 50; // Set minimum column width\r\n        setColumnHeader(updatedColumns);\r\n      };\r\n\r\n      const stopDrag = () => {\r\n        document.removeEventListener(\"mousemove\", doDrag);\r\n        document.removeEventListener(\"mouseup\", stopDrag);\r\n      };\r\n\r\n      document.addEventListener(\"mousemove\", doDrag);\r\n      document.addEventListener(\"mouseup\", stopDrag);\r\n    };\r\n    const handleMouseEnter = (index: any) => {\r\n      setHoveredColumn(index); // Set the hovered column index\r\n    };\r\n    const handleMouseLeave = () => {\r\n      setHoveredColumn(null); // Reset hovered column index\r\n    };\r\n\r\n    return (\r\n      <>\r\n        <ActionModal\r\n          ref={actionModalRef}\r\n          Component={\r\n            <ActionComponent\r\n              selectedRowIndex={selectedRowIndex}\r\n              closeModal={() => actionModalRef.current.closeDelay()}\r\n              rowItm={data[selectedRowIndex]}\r\n            />\r\n          }\r\n        />\r\n        <div\r\n          ref={parentElementRef}\r\n          style={{\r\n            width: \"100%\",\r\n            height,\r\n            overflow: \"auto\",\r\n            position: \"relative\",\r\n            pointerEvents: disbaleTable ? \"none\" : \"auto\",\r\n            border: disbaleTable ? \"2px solid #8c8f8e\" : \"2px solid #c0c0c0\",\r\n            boxShadow: `inset -2px -2px 0 #ffffff, \r\n                        inset 2px 2px 0 #808080`,\r\n            ...containerStyle,\r\n            background: \"#dcdcdc\",\r\n          }}\r\n        >\r\n          <div\r\n            style={{\r\n              position: \"absolute\",\r\n              width: `${totalRowWidth}px`,\r\n              height: \"auto\",\r\n            }}\r\n          >\r\n            <table\r\n              id=\"upward-cutom-table\"\r\n              style={{\r\n                borderCollapse: \"collapse\",\r\n                width: \"100%\",\r\n                position: \"relative\",\r\n                background: \"#dcdcdc\",\r\n              }}\r\n            >\r\n              <thead>\r\n                <tr>\r\n                  <th\r\n                    style={{\r\n                      width: \"30px\",\r\n                      border: \"none\",\r\n                      position: \"sticky\",\r\n                      top: 0,\r\n                      zIndex: 1,\r\n                      background: \"#f0f0f0\",\r\n                    }}\r\n                  ></th>\r\n                  {showSequence && (\r\n                    <th\r\n                      style={{\r\n                        width: \"50px\",\r\n                        borderRight: \"1px solid #e2e8f0\",\r\n                        position: \"sticky\",\r\n                        top: 0,\r\n                        zIndex: 1,\r\n                        background: \"#f0f0f0\",\r\n                        fontSize: \"12px\",\r\n                        padding: \"0px 5px\",\r\n                        textAlign: \"center\",\r\n                      }}\r\n                    >\r\n                      SEQ\r\n                    </th>\r\n                  )}\r\n                  {column.map((colItm: any, idx: number) => {\r\n                    return (\r\n                      <th\r\n                        key={idx}\r\n                        style={{\r\n                          width: colItm.width,\r\n                          borderRight: \"1px solid #e2e8f0\",\r\n                          position: \"sticky\",\r\n                          top: 0,\r\n                          zIndex: 1,\r\n                          background: \"#f0f0f0\",\r\n                          fontSize: \"12px\",\r\n                          padding: \"0px 5px\",\r\n                          textAlign:\r\n                            colItm.type === \"number\" ? \"center\" : \"left\",\r\n                        }}\r\n                      >\r\n                        <div\r\n                          key={idx}\r\n                          className={` ${\r\n                            hoveredColumn === idx ? `highlight-column` : \"\"\r\n                          }`} // Add the class if hovered\r\n                          style={{ width: colItm.width, height: \"20px\" }}\r\n                        >\r\n                          {colItm.label}\r\n\r\n                          <div\r\n                            className=\"resize-handle\"\r\n                            onMouseDown={(e) => startResize(idx, e)}\r\n                            onMouseEnter={(e) => {\r\n                              e.preventDefault();\r\n                              handleMouseEnter(idx);\r\n                            }} // On hover\r\n                            onMouseLeave={(e) => {\r\n                              e.preventDefault();\r\n                              handleMouseLeave();\r\n                            }} // On mouse leave\r\n                          />\r\n                        </div>\r\n                      </th>\r\n                    );\r\n                  })}\r\n                </tr>\r\n              </thead>\r\n              <tbody ref={tbodyRef}>\r\n                {data?.map((rowItm: any, rowIdx: number) => {\r\n                  return (\r\n                    <RowComponent\r\n                      key={rowIdx}\r\n                      rowIdx={rowIdx}\r\n                      rowItm={rowItm}\r\n                      selectedRowIndex={selectedRowIndex}\r\n                      selectedRow={selectedRow}\r\n                      isTableSelectable={isTableSelectable}\r\n                      setSelectedRowIndex={setSelectedRowIndex}\r\n                      getSelectedItem={getSelectedItem}\r\n                      setSelectedRow={setSelectedRow}\r\n                      column={column}\r\n                      onKeyDown={onKeyDown}\r\n                      focusElementOnMaxTop={focusElementOnMaxTop}\r\n                      data={data}\r\n                      parentElementRef={parentElementRef}\r\n                      checkboxRef={checkboxRef}\r\n                      handleResetCheckBox={handleResetCheckBox}\r\n                      handleResetCheckBoxByIndex={handleResetCheckBoxByIndex}\r\n                      handleRightClick={handleRightClick}\r\n                      showSequence={showSequence}\r\n                    />\r\n                  );\r\n                })}\r\n              </tbody>\r\n            </table>\r\n            <style>\r\n              {`\r\n             #upward-cutom-table tr td{\r\n               border-right:1px solid #f1f5f9 !important;\r\n             }\r\n          \r\n              #upward-cutom-table tr:nth-child(odd) td {\r\n                  background-color: #ffffff !important;\r\n              }\r\n              #upward-cutom-table tr:nth-child(even) td {\r\n                  background-color: #f5f5f5 !important;\r\n              }\r\n              #upward-cutom-table tr.selected td {\r\n                  background-color: #0076d7 !important;\r\n                  color: #ffffff !important;\r\n                  border-right:1px solid white !important;\r\n                border-bottom:1px solid white !important;\r\n\r\n              }\r\n              \r\n               #upward-cutom-table tr.selected td input {\r\n                  color: #ffffff !important;\r\n              }\r\n\r\n              .resize-handle {\r\n                    position: absolute;\r\n                    right: 0;\r\n                    top: 0;\r\n                    width: 5px;\r\n                    height: 100%;\r\n                    cursor: col-resize;\r\n                    background-color: transparent;\r\n                  }\r\n\r\n                  .resize-handle:hover {\r\n                    background-color: #101111;\r\n                  }\r\n\r\n                  .highlight-column {\r\n                    border-right: 2px solid #007bff !important;\r\n                  }\r\n  \r\n              `}\r\n            </style>\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n);\r\n\r\nconst RowComponent = forwardRef(\r\n  (\r\n    {\r\n      rowIdx,\r\n      rowItm,\r\n      selectedRowIndex,\r\n      selectedRow,\r\n      isTableSelectable,\r\n      setSelectedRowIndex,\r\n      getSelectedItem,\r\n      setSelectedRow,\r\n      column,\r\n      onKeyDown,\r\n      focusElementOnMaxTop,\r\n      data,\r\n      parentElementRef,\r\n      checkboxRef,\r\n      handleResetCheckBox,\r\n      handleResetCheckBoxByIndex,\r\n      handleRightClick,\r\n      showSequence,\r\n    }: any,\r\n    ref\r\n  ) => {\r\n    return (\r\n      <tr\r\n        data-index={rowIdx}\r\n        key={rowIdx}\r\n        className={`row ${\r\n          selectedRow === rowIdx || selectedRowIndex === rowIdx\r\n            ? \"selected\"\r\n            : \"\"\r\n        }`}\r\n      >\r\n        <td\r\n          style={{\r\n            position: \"relative\",\r\n            border: \"none\",\r\n            cursor: \"pointer\",\r\n            background: selectedRow === rowIdx ? \"#0076d\" : \"\",\r\n            padding: 0,\r\n            margin: 0,\r\n          }}\r\n        >\r\n          <div\r\n            style={{\r\n              width: \"18px\",\r\n              height: \"18px\",\r\n              position: \"relative\",\r\n              display: \"flex\",\r\n              alignItems: \"center\",\r\n              justifyContent: \"center\",\r\n            }}\r\n          >\r\n            <CheckBoxSelection\r\n              key={rowIdx}\r\n              checkboxRef={checkboxRef}\r\n              isTableSelectable={isTableSelectable}\r\n              setSelectedRowIndex={setSelectedRowIndex}\r\n              rowIdx={rowIdx}\r\n              rowItm={rowItm}\r\n              getSelectedItem={getSelectedItem}\r\n              setSelectedRow={setSelectedRow}\r\n              handleResetCheckBoxByIndex={handleResetCheckBoxByIndex}\r\n            />\r\n          </div>\r\n        </td>\r\n\r\n        {showSequence && (\r\n          <td\r\n            style={{\r\n              position: \"relative\",\r\n              border: \"none\",\r\n              cursor: \"pointer\",\r\n              background: selectedRow === rowIdx ? \"#0076d\" : \"\",\r\n              padding: 0,\r\n              margin: 0,\r\n            }}\r\n          >\r\n            <input\r\n              readOnly={true}\r\n              defaultValue={`${String(rowIdx + 1).padStart(2, \"0\")}`}\r\n              style={{\r\n                width: \"50px\",\r\n                pointerEvents: \"none\",\r\n                border: \"none\",\r\n                background: \"transparent\",\r\n                userSelect: \"none\",\r\n                height: \"100%\",\r\n                textAlign: \"center\",\r\n              }}\r\n            />\r\n          </td>\r\n        )}\r\n\r\n        {column.map((colItm: any, colIdx: number) => {\r\n          return (\r\n            <td\r\n              className={`td row-${rowIdx} col-${colIdx} `}\r\n              tabIndex={0}\r\n              onDoubleClick={() => {\r\n                if (!isTableSelectable) {\r\n                  return;\r\n                }\r\n                handleResetCheckBox();\r\n                if (selectedRowIndex === rowIdx) {\r\n                  setSelectedRowIndex(null);\r\n\r\n                  checkboxRef.current[rowIdx].checked = false;\r\n\r\n                  if (getSelectedItem) {\r\n                    getSelectedItem(null, null, rowIdx, null);\r\n                  }\r\n                } else {\r\n                  checkboxRef.current[rowIdx].checked = true;\r\n\r\n                  setSelectedRowIndex(rowIdx);\r\n                  if (getSelectedItem) {\r\n                    getSelectedItem(rowItm, null, rowIdx, null);\r\n                  }\r\n                }\r\n                setSelectedRow(null);\r\n              }}\r\n              onClick={() => {\r\n                setSelectedRow(rowIdx);\r\n              }}\r\n              onKeyDown={(e) => {\r\n                if (onKeyDown) {\r\n                  onKeyDown(rowItm, rowIdx, e);\r\n                }\r\n                if (e.key === \"ArrowUp\") {\r\n                  setSelectedRow((prev: any) => {\r\n                    const index = Math.max(prev - 1, -1);\r\n                    const td = document.querySelector(\r\n                      `.td.row-${index}`\r\n                    ) as HTMLTableDataCellElement;\r\n\r\n                    if (index < 0) {\r\n                      if (focusElementOnMaxTop) {\r\n                        focusElementOnMaxTop();\r\n                      }\r\n                      return;\r\n                    }\r\n                    if (td) {\r\n                      td.focus();\r\n                    }\r\n                    return index;\r\n                  });\r\n                } else if (e.key === \"ArrowDown\") {\r\n                  setSelectedRow((prev: any) => {\r\n                    const index = Math.min(prev + 1, data.length - 1);\r\n                    const td = document.querySelector(\r\n                      `.td.row-${index}`\r\n                    ) as HTMLTableDataCellElement;\r\n\r\n                    if (td) {\r\n                      td.focus();\r\n                      if (index <= 15) {\r\n                        parentElementRef.current.style.overflow = \"hidden\";\r\n                        setTimeout(() => {\r\n                          parentElementRef.current.style.overflow = \"auto\";\r\n                        }, 100);\r\n                        return index;\r\n                      }\r\n                    }\r\n                    return index;\r\n                  });\r\n                }\r\n                if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\r\n                  e.preventDefault();\r\n\r\n                  if (!isTableSelectable) {\r\n                    return;\r\n                  }\r\n\r\n                  setSelectedRowIndex(rowIdx);\r\n\r\n                  if (getSelectedItem) {\r\n                    getSelectedItem(rowItm, null, rowIdx, null);\r\n                  }\r\n                  setSelectedRow(null);\r\n                }\r\n              }}\r\n              key={colIdx}\r\n              style={{\r\n                border: \"none\",\r\n                fontSize: \"12px\",\r\n                padding: \"0px 5px\",\r\n                cursor: \"pointer\",\r\n                height: \"20px\",\r\n                userSelect: \"none\",\r\n              }}\r\n              onContextMenu={(e) => handleRightClick(e, rowIdx)}\r\n            >\r\n              {\r\n                <input\r\n                  readOnly={true}\r\n                  value={rowItm[colIdx]}\r\n                  style={{\r\n                    width: colItm.width,\r\n                    pointerEvents: \"none\",\r\n                    border: \"none\",\r\n                    background: \"transparent\",\r\n                    userSelect: \"none\",\r\n                    height: \"100%\",\r\n                    textAlign: colItm.type === \"number\" ? \"right\" : \"left\",\r\n                  }}\r\n                />\r\n              }\r\n            </td>\r\n          );\r\n        })}\r\n      </tr>\r\n    );\r\n  }\r\n);\r\nconst CheckBoxSelection = forwardRef(\r\n  (\r\n    {\r\n      isTableSelectable,\r\n      setSelectedRowIndex,\r\n      rowIdx,\r\n      rowItm,\r\n      getSelectedItem,\r\n      setSelectedRow,\r\n      checkboxRef,\r\n      handleResetCheckBoxByIndex,\r\n    }: any,\r\n    ref\r\n  ) => {\r\n    return (\r\n      <input\r\n        ref={(el) => (checkboxRef.current[rowIdx] = el) as any}\r\n        style={{\r\n          cursor: \"pointer\",\r\n          margin: \"0px !important\",\r\n          position: \"absolute\",\r\n        }}\r\n        readOnly={true}\r\n        type=\"checkbox\"\r\n        onClick={(e) => {\r\n          if (!isTableSelectable) {\r\n            return;\r\n          }\r\n          handleResetCheckBoxByIndex(rowIdx);\r\n          if (e.currentTarget.checked) {\r\n            setSelectedRowIndex(rowIdx);\r\n            if (getSelectedItem) {\r\n              getSelectedItem(rowItm, null, rowIdx, null);\r\n            }\r\n            setSelectedRow(null);\r\n            return;\r\n          } else {\r\n            setSelectedRowIndex(null);\r\n            if (getSelectedItem) {\r\n              getSelectedItem(null, null, rowIdx, null);\r\n            }\r\n            setSelectedRow(null);\r\n            return;\r\n          }\r\n        }}\r\n      />\r\n    );\r\n  }\r\n);\r\n\r\nconst ActionModal = forwardRef(\r\n  ({ handleOnSave, handleOnClose, hasSelectedRow, Component }: any, ref) => {\r\n    const [showModal, setShowModal] = useState(false);\r\n    const [handleDelayClose, setHandleDelayClose] = useState(false);\r\n    const [blick, setBlick] = useState(false);\r\n\r\n    const closeDelay = () => {\r\n      setHandleDelayClose(true);\r\n      setTimeout(() => {\r\n        setShowModal(false);\r\n        setHandleDelayClose(false);\r\n        if (handleOnClose) handleOnClose();\r\n      }, 100);\r\n    };\r\n    const closeDelayRef = useRef<any>(closeDelay);\r\n\r\n    useImperativeHandle(ref, () => ({\r\n      showModal: () => {\r\n        setShowModal(true);\r\n      },\r\n      clsoeModal: () => {\r\n        setShowModal(false);\r\n      },\r\n      blick,\r\n      closeDelay,\r\n    }));\r\n\r\n    useEffect(() => {\r\n      window.addEventListener(\"keydown\", (e: any) => {\r\n        if (e.key === \"Escape\") {\r\n          closeDelayRef.current();\r\n        }\r\n      });\r\n    }, []);\r\n\r\n    return showModal ? (\r\n      <>\r\n        <div\r\n          style={{\r\n            position: \"fixed\",\r\n            top: 0,\r\n            bottom: 0,\r\n            left: 0,\r\n            right: 0,\r\n            background: \"transparent\",\r\n            zIndex: \"88\",\r\n          }}\r\n          onClick={() => {\r\n            setBlick(true);\r\n            setTimeout(() => {\r\n              setBlick(false);\r\n            }, 250);\r\n          }}\r\n        ></div>\r\n        <div\r\n          style={{\r\n            height: \"auto\",\r\n            width: \"auto\",\r\n            border: \"1px solid #64748b\",\r\n            position: \"absolute\",\r\n            left: \"50%\",\r\n            top: \"50%\",\r\n            transform: \"translate(-50%, -75%)\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            zIndex: handleDelayClose ? -100 : 100,\r\n            opacity: handleDelayClose ? 0 : 1,\r\n            transition: \"all 150ms\",\r\n            boxShadow: \"3px 6px 32px -7px rgba(0,0,0,0.75)\",\r\n          }}\r\n        >\r\n          <div\r\n            style={{\r\n              height: \"22px\",\r\n              background: \"white\",\r\n              display: \"flex\",\r\n              justifyContent: \"space-between\",\r\n              padding: \"5px\",\r\n              position: \"relative\",\r\n              alignItems: \"center\",\r\n            }}\r\n          >\r\n            <span style={{ fontSize: \"13px\", fontWeight: \"bold\" }}>Action</span>\r\n            <button\r\n              className=\"btn-check-exit-modal\"\r\n              style={{\r\n                padding: \"0 5px\",\r\n                borderRadius: \"0px\",\r\n                background: \"white\",\r\n                color: \"black\",\r\n                height: \"22px\",\r\n                position: \"absolute\",\r\n                top: 0,\r\n                right: 0,\r\n              }}\r\n              onClick={() => {\r\n                closeDelay();\r\n              }}\r\n            >\r\n              <CloseIcon sx={{ fontSize: \"22px\" }} />\r\n            </button>\r\n          </div>\r\n          {Component}\r\n          <style>\r\n            {`\r\n              .btn-check-exit-modal:hover{\r\n                background:red !important;\r\n                color:white !important;\r\n              }\r\n            `}\r\n          </style>\r\n        </div>\r\n      </>\r\n    ) : null;\r\n  }\r\n);\r\n\r\nexport const DataGridViewMultiSelectionReact = forwardRef(\r\n  (\r\n    {\r\n      columns,\r\n      rows = [],\r\n      height = \"400px\",\r\n      getSelectedItem,\r\n      onKeyDown,\r\n      disbaleTable = false,\r\n      isTableSelectable: _isTableSelectable = true,\r\n      containerStyle,\r\n      focusElementOnMaxTop,\r\n      onCheckAll,\r\n      onUnCheckAll,\r\n      rowIsSelectable,\r\n    }: any,\r\n    ref\r\n  ) => {\r\n    const parentElementRef = useRef<any>(null);\r\n    const tbodyRef = useRef<HTMLTableSectionElement>(null);\r\n    const [data, setData] = useState([]);\r\n    const [column, setColumn] = useState([]);\r\n    const [selectedRow, setSelectedRow] = useState<any>(0);\r\n    const [selectedRowIndex, setSelectedRowIndex] = useState<Array<any>>([]);\r\n    const totalRowWidth = column.reduce((a: any, b: any) => a + b.width, 0);\r\n    const [isTableSelectable, setIsTableSelectable] =\r\n      useState(_isTableSelectable);\r\n\r\n    const [columnHeader, setColumnHeader] = useState(\r\n      columns.filter((itm: any) => !itm.hide)\r\n    );\r\n    const [hoveredColumn, setHoveredColumn] = useState(null);\r\n\r\n    useEffect(() => {\r\n      if (columns.length > 0) {\r\n        setColumn(columns.filter((itm: any) => !itm.hide));\r\n      }\r\n    }, [columns]);\r\n\r\n    useImperativeHandle(ref, () => ({\r\n      checkNoIsExist: (checkNo: string) => {\r\n        return data.some((subArray: any) => subArray[2] === checkNo);\r\n      },\r\n      selectedRow: () => selectedRow,\r\n      getData: () => {\r\n        const newData = [...data];\r\n        return newData;\r\n      },\r\n      getSelectedRowsData: () => {\r\n        const newData = [...data];\r\n        return selectedRowIndex\r\n          .map((index) => newData[index])\r\n          .filter((item) => item !== undefined);\r\n      },\r\n      setData: (newData: any) => {\r\n        setData(newData);\r\n      },\r\n      getColumns: () => {\r\n        return columns;\r\n      },\r\n      resetTable: () => {\r\n        setData([]);\r\n        setSelectedRow(0);\r\n        setSelectedRowIndex([]);\r\n      },\r\n      getSelectedRow: () => {\r\n        return selectedRowIndex;\r\n      },\r\n      setSelectedRow: (value: any) => {\r\n        return setSelectedRowIndex(value);\r\n      },\r\n      _setSelectedRow: (value: any) => {\r\n        return setSelectedRow(value);\r\n      },\r\n      setDataFormated: (newData: any) => {\r\n        setData(\r\n          newData.map((itm: any) => {\r\n            return columns.map((col: any) => itm[col.key]);\r\n          })\r\n        );\r\n      },\r\n      setIsTableSelectable: (param: boolean) => {\r\n        setIsTableSelectable(param);\r\n      },\r\n      getDataFormatted: () => {\r\n        const newData = [...data];\r\n        const newDataFormatted = newData.map((itm: any) => {\r\n          let newItm = {\r\n            Check_No: itm[0],\r\n            Check_Date: itm[1],\r\n            Check_Amnt: itm[2],\r\n            BankName: itm[3],\r\n            Branch: itm[4],\r\n            Check_Remarks: itm[5],\r\n            Deposit_Slip: itm[6],\r\n            DateDeposit: itm[7],\r\n            OR_No: itm[8],\r\n            BankCode: itm[9],\r\n          };\r\n          return newItm;\r\n        });\r\n\r\n        return newDataFormatted;\r\n      },\r\n      getElementBody: () => tbodyRef.current,\r\n      getParentElement: () => parentElementRef.current,\r\n      isTableSelectable,\r\n    }));\r\n\r\n    const startResize = (index: any, e: any) => {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n\r\n      const startX = e.clientX;\r\n      const startWidth = columnHeader[index].width;\r\n\r\n      const doDrag = (moveEvent: any) => {\r\n        const newWidth = startWidth + (moveEvent.clientX - startX);\r\n        const updatedColumns = [...columnHeader];\r\n        updatedColumns[index].width = newWidth > 50 ? newWidth : 50; // Set minimum column width\r\n        setColumnHeader(updatedColumns);\r\n      };\r\n\r\n      const stopDrag = () => {\r\n        document.removeEventListener(\"mousemove\", doDrag);\r\n        document.removeEventListener(\"mouseup\", stopDrag);\r\n      };\r\n\r\n      document.addEventListener(\"mousemove\", doDrag);\r\n      document.addEventListener(\"mouseup\", stopDrag);\r\n    };\r\n    const handleMouseEnter = (index: any) => {\r\n      setHoveredColumn(index); // Set the hovered column index\r\n    };\r\n    const handleMouseLeave = () => {\r\n      setHoveredColumn(null); // Reset hovered column index\r\n    };\r\n\r\n    return (\r\n      <div\r\n        ref={parentElementRef}\r\n        style={{\r\n          width: \"100%\",\r\n          height,\r\n          overflow: \"auto\",\r\n          position: \"relative\",\r\n          pointerEvents: disbaleTable ? \"none\" : \"auto\",\r\n          border: disbaleTable ? \"2px solid #8c8f8e\" : \"2px solid #c0c0c0\",\r\n          boxShadow: `inset -2px -2px 0 #ffffff, \r\n                        inset 2px 2px 0 #808080`,\r\n          ...containerStyle,\r\n          background: \"#dcdcdc\",\r\n        }}\r\n      >\r\n        <div\r\n          style={{\r\n            position: \"absolute\",\r\n            width: `${totalRowWidth}px`,\r\n            height: \"auto\",\r\n          }}\r\n        >\r\n          <table\r\n            id=\"upward-cutom-table-multi\"\r\n            style={{\r\n              borderCollapse: \"collapse\",\r\n              width: \"100%\",\r\n              position: \"relative\",\r\n              background: \"#dcdcdc\",\r\n            }}\r\n          >\r\n            <thead>\r\n              <tr>\r\n                {isTableSelectable && (\r\n                  <th\r\n                    style={{\r\n                      width: \"30px\",\r\n                      border: \"none\",\r\n                      position: \"sticky\",\r\n                      top: 0,\r\n                      zIndex: 1,\r\n                      background: \"#f0f0f0\",\r\n                    }}\r\n                  >\r\n                    <div\r\n                      style={{\r\n                        width: \"18px\",\r\n                        height: \"18px\",\r\n                        position: \"relative\",\r\n                        display: \"flex\",\r\n                        alignItems: \"center\",\r\n                        justifyContent: \"center\",\r\n                      }}\r\n                    >\r\n                      <input\r\n                        style={{\r\n                          cursor: \"pointer\",\r\n                          margin: \"0px !important\",\r\n                          position: \"absolute\",\r\n                        }}\r\n                        readOnly={true}\r\n                        type=\"checkbox\"\r\n                        onClick={(e) => {\r\n                          if (e.currentTarget.checked) {\r\n                            if (onCheckAll) {\r\n                              onCheckAll();\r\n                            }\r\n                          } else {\r\n                            if (onUnCheckAll) {\r\n                              onUnCheckAll();\r\n                            }\r\n                          }\r\n                        }}\r\n                      />\r\n                    </div>\r\n                  </th>\r\n                )}\r\n                {column.map((colItm: any, idx: number) => {\r\n                  return (\r\n                    <th\r\n                      key={idx}\r\n                      style={{\r\n                        width: colItm.width,\r\n                        borderRight: \"1px solid #e2e8f0\",\r\n                        position: \"sticky\",\r\n                        top: 0,\r\n                        zIndex: 1,\r\n                        background: \"#f0f0f0\",\r\n                        fontSize: \"12px\",\r\n                        padding: \"0px 5px\",\r\n                        textAlign: colItm.type === \"number\" ? \"center\" : \"left\",\r\n                      }}\r\n                    >\r\n                      <div\r\n                        key={idx}\r\n                        className={` ${\r\n                          hoveredColumn === idx ? `highlight-column` : \"\"\r\n                        }`} // Add the class if hovered\r\n                        style={{ width: colItm.width, height: \"20px\" }}\r\n                      >\r\n                        {colItm.label}\r\n\r\n                        <div\r\n                          className=\"resize-handle\"\r\n                          onMouseDown={(e) => startResize(idx, e)}\r\n                          onMouseEnter={(e) => {\r\n                            e.preventDefault();\r\n                            handleMouseEnter(idx);\r\n                          }} // On hover\r\n                          onMouseLeave={(e) => {\r\n                            e.preventDefault();\r\n                            handleMouseLeave();\r\n                          }} // On mouse leave\r\n                        />\r\n                      </div>\r\n                    </th>\r\n                  );\r\n                })}\r\n              </tr>\r\n            </thead>\r\n            <tbody ref={tbodyRef}>\r\n              {data?.map((rowItm: any, rowIdx: number) => {\r\n                return (\r\n                  <tr\r\n                    data-index={rowIdx}\r\n                    key={rowIdx}\r\n                    className={`row ${\r\n                      selectedRow === rowIdx &&\r\n                      selectedRowIndex.includes(rowIdx)\r\n                        ? \"multi-selected-row-item\"\r\n                        : selectedRow === rowIdx\r\n                        ? \"multi-selected-row\"\r\n                        : selectedRowIndex.includes(rowIdx)\r\n                        ? \"multi-selected-item\"\r\n                        : \"\"\r\n                    }`}\r\n                  >\r\n                    {isTableSelectable && (\r\n                      <td\r\n                        style={{\r\n                          position: \"relative\",\r\n                          border: \"none\",\r\n                          cursor: \"pointer\",\r\n                          background: selectedRow === rowIdx ? \"#0076d\" : \"\",\r\n                          padding: 0,\r\n                          margin: 0,\r\n                        }}\r\n                      >\r\n                        <div\r\n                          style={{\r\n                            width: \"18px\",\r\n                            height: \"18px\",\r\n                            position: \"relative\",\r\n                            display: \"flex\",\r\n                            alignItems: \"center\",\r\n                            justifyContent: \"center\",\r\n                          }}\r\n                        >\r\n                          <input\r\n                            style={{\r\n                              cursor: \"pointer\",\r\n                              margin: \"0px !important\",\r\n                              position: \"absolute\",\r\n                            }}\r\n                            readOnly={true}\r\n                            checked={selectedRowIndex.includes(rowIdx)}\r\n                            type=\"checkbox\"\r\n                            onClick={() => {\r\n                              if (rowIsSelectable && rowIsSelectable(rowItm)) {\r\n                                return;\r\n                              }\r\n                              if (!isTableSelectable) {\r\n                                return;\r\n                              }\r\n\r\n                              if (selectedRowIndex.includes(rowIdx)) {\r\n                                setSelectedRowIndex((d: any) =>\r\n                                  d.filter((i: any) => i !== rowIdx)\r\n                                );\r\n                              } else {\r\n                                setSelectedRowIndex((d: any) => [...d, rowIdx]);\r\n                              }\r\n\r\n                              if (getSelectedItem) {\r\n                                getSelectedItem(rowItm, null, rowIdx, null);\r\n                              }\r\n                            }}\r\n                          />\r\n                        </div>\r\n                      </td>\r\n                    )}\r\n\r\n                    {column.map((colItm: any, colIdx: number) => {\r\n                      return (\r\n                        <td\r\n                          className={`td row-${rowIdx} col-${colIdx} `}\r\n                          tabIndex={0}\r\n                          onDoubleClick={() => {\r\n                            if (rowIsSelectable && rowIsSelectable(rowItm)) {\r\n                              return;\r\n                            }\r\n                            if (!isTableSelectable) {\r\n                              return;\r\n                            }\r\n\r\n                            if (selectedRowIndex.includes(rowIdx)) {\r\n                              setSelectedRowIndex((d: any) =>\r\n                                d.filter((i: any) => i !== rowIdx)\r\n                              );\r\n\r\n                              if (getSelectedItem) {\r\n                                getSelectedItem(null, null, rowIdx, null);\r\n                              }\r\n\r\n                              return;\r\n                            } else {\r\n                              setSelectedRowIndex((d: any) => [...d, rowIdx]);\r\n\r\n                              if (getSelectedItem) {\r\n                                getSelectedItem(rowItm, null, rowIdx, null);\r\n                              }\r\n                            }\r\n                          }}\r\n                          onClick={() => {\r\n                            setSelectedRow(rowIdx);\r\n                          }}\r\n                          onKeyDown={(e) => {\r\n                            if (onKeyDown) {\r\n                              onKeyDown(rowItm, rowIdx, e);\r\n                            }\r\n                            if (e.key === \"ArrowUp\") {\r\n                              setSelectedRow((prev: any) => {\r\n                                const index = Math.max(prev - 1, -1);\r\n                                const td = document.querySelector(\r\n                                  `.td.row-${index}`\r\n                                ) as HTMLTableDataCellElement;\r\n                                if (index < 0) {\r\n                                  if (focusElementOnMaxTop) {\r\n                                    focusElementOnMaxTop();\r\n                                  }\r\n                                  return;\r\n                                }\r\n                                if (td) {\r\n                                  td.focus();\r\n                                }\r\n                                return index;\r\n                              });\r\n                            } else if (e.key === \"ArrowDown\") {\r\n                              setSelectedRow((prev: any) => {\r\n                                const index = Math.min(\r\n                                  prev + 1,\r\n                                  data.length - 1\r\n                                );\r\n                                const td = document.querySelector(\r\n                                  `.td.row-${index}`\r\n                                ) as HTMLTableDataCellElement;\r\n                                if (td) {\r\n                                  td.focus();\r\n                                  if (index <= 15) {\r\n                                    parentElementRef.current.style.overflow =\r\n                                      \"hidden\";\r\n                                    setTimeout(() => {\r\n                                      parentElementRef.current.style.overflow =\r\n                                        \"auto\";\r\n                                    }, 100);\r\n                                    return index;\r\n                                  }\r\n                                }\r\n                                return index;\r\n                              });\r\n                            }\r\n                            if (\r\n                              e.code === \"Enter\" ||\r\n                              e.code === \"NumpadEnter\"\r\n                            ) {\r\n                              e.preventDefault();\r\n\r\n                              if (!isTableSelectable) {\r\n                                return;\r\n                              }\r\n\r\n                              if (selectedRowIndex.includes(rowIdx)) {\r\n                                setSelectedRowIndex((d: any) =>\r\n                                  d.filter((i: any) => i !== rowIdx)\r\n                                );\r\n                              } else {\r\n                                setSelectedRowIndex((d: any) => [...d, rowIdx]);\r\n                              }\r\n                              if (getSelectedItem) {\r\n                                getSelectedItem(rowItm, null, rowIdx, null);\r\n                              }\r\n                            }\r\n                          }}\r\n                          key={colIdx}\r\n                          style={{\r\n                            border: \"none\",\r\n                            fontSize: \"12px\",\r\n                            padding: \"0px 5px\",\r\n                            cursor: \"pointer\",\r\n                            height: \"20px\",\r\n                            userSelect: \"none\",\r\n                          }}\r\n                        >\r\n                          {\r\n                            <input\r\n                              readOnly={true}\r\n                              value={rowItm[colIdx]}\r\n                              style={{\r\n                                width: colItm.width,\r\n                                pointerEvents: \"none\",\r\n                                border: \"none\",\r\n                                background: \"transparent\",\r\n                                userSelect: \"none\",\r\n                                height: \"100%\",\r\n                                textAlign:\r\n                                  colItm.type === \"number\" ? \"right\" : \"left\",\r\n                              }}\r\n                            />\r\n                          }\r\n                        </td>\r\n                      );\r\n                    })}\r\n                  </tr>\r\n                );\r\n              })}\r\n            </tbody>\r\n          </table>\r\n          <style>\r\n            {`\r\n             #upward-cutom-table-multi tr td{\r\n               border-right:1px solid #f1f5f9 !important;\r\n             }\r\n          \r\n              #upward-cutom-table-multi tr:nth-child(odd) td {\r\n                  background-color: #ffffff !important;\r\n              }\r\n              #upward-cutom-table-multi tr:nth-child(even) td {\r\n                  background-color: #f5f5f5 !important;\r\n              }\r\n\r\n             #upward-cutom-table-multi tr.multi-selected-row-item td {\r\n                background-color: rgba(84, 84, 82, 0.73) !important;\r\n                border-right:1px solid white !important;\r\n                border-bottom:1px solid white !important;\r\n              }\r\n              #upward-cutom-table-multi tr.multi-selected-row-item td input {\r\n                  color: #ffffff !important;\r\n              }\r\n\r\n            #upward-cutom-table-multi tr.multi-selected-item td {\r\n                background-color: rgba(232, 232, 226, 0.99) !important;\r\n                border-right:1px solid white !important;\r\n                border-bottom:1px solid white !important;\r\n              }\r\n              #upward-cutom-table-multi tr.multi-selected-item td input {\r\n                  color: black !important;\r\n              }\r\n\r\n              #upward-cutom-table-multi tr.multi-selected-row td {\r\n                  background-color: #0076d7 !important;\r\n                  border-right:1px solid white !important;\r\n                  border-bottom:1px solid white !important;\r\n              }\r\n              #upward-cutom-table-multi tr.multi-selected-row td input {\r\n                  color: #ffffff !important;\r\n              }\r\n                  .resize-handle {\r\n                    position: absolute;\r\n                    right: 0;\r\n                    top: 0;\r\n                    width: 5px;\r\n                    height: 100%;\r\n                    cursor: col-resize;\r\n                    background-color: transparent;\r\n                  }\r\n\r\n                  .resize-handle:hover {\r\n                    background-color: #101111;\r\n                  }\r\n\r\n                  .highlight-column {\r\n                    border-right: 2px solid #007bff !important;\r\n                  }\r\n  \r\n  \r\n              `}\r\n          </style>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nlet _dataCache: any = [];\r\nlet _searchInputValueCache = \"\";\r\nexport const useUpwardTableModalSearchSafeMode = ({\r\n  column,\r\n  link,\r\n  getSelectedItem,\r\n  onKeyDown,\r\n  customWidth,\r\n  onClose,\r\n  size = \"small\",\r\n}: any) => {\r\n  const [show, setShow] = useState(false);\r\n  const searchInputRef = useRef<HTMLInputElement>(null);\r\n\r\n  function openModal(search: string = \"\") {\r\n    const body = document.body;\r\n    const div = document.createElement(\"div\");\r\n    div.id = \"modal-portal\";\r\n\r\n    if (document.getElementById(\"modal-portal\"))\r\n      body.removeChild(document.getElementById(\"modal-portal\") as HTMLElement);\r\n    body.insertBefore(div, body.firstChild);\r\n\r\n    setShow(true);\r\n    wait(100).then(() => {\r\n      if (searchInputRef.current) {\r\n        searchInputRef.current.value = search;\r\n        const event = new KeyboardEvent(\"keydown\", {\r\n          code: \"Enter\",\r\n          bubbles: true,\r\n        });\r\n        searchInputRef.current.focus(); // Ensure the element has focus\r\n        searchInputRef.current.dispatchEvent(event); // Dispatch the native event\r\n        wait(100).then(() => {\r\n          searchInputRef.current?.focus();\r\n        });\r\n      }\r\n    });\r\n  }\r\n  function closeModal(muteOnClose = true) {\r\n    if (onClose && muteOnClose) {\r\n      onClose();\r\n    }\r\n    setShow(false);\r\n    _dataCache = [];\r\n  }\r\n  const UpwardTableModalSearch = () => {\r\n    const modalRef = useRef<HTMLDivElement>(null);\r\n    const isMoving = useRef(false);\r\n    const offset = useRef({ x: 0, y: 0 });\r\n\r\n    const { user, myAxios } = useContext(UserContext);\r\n    const tableRef = useRef<any>(null);\r\n    const [blick, setBlick] = useState(false);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [data, setData] = useState([]);\r\n\r\n    function mutate(variable: any) {\r\n      setIsLoading(true);\r\n      myAxios\r\n        .post(link, variable, {\r\n          headers: {\r\n            Authorization: `Bearer ${user?.accessToken}`,\r\n          },\r\n        })\r\n        .then((response) => {\r\n          setData(response.data?.data);\r\n          setIsLoading(false);\r\n        })\r\n        .catch((err) => {\r\n          setIsLoading(false);\r\n          console.log(err);\r\n        })\r\n        .finally(() => {\r\n          setIsLoading(false);\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n      if (_dataCache.length > 0) {\r\n        if (searchInputRef.current) {\r\n          searchInputRef.current.value = _searchInputValueCache;\r\n        }\r\n        setData(_dataCache);\r\n      }\r\n    }, [setData]);\r\n\r\n    useEffect(() => {\r\n      if (data.length > 0) {\r\n        _dataCache = data;\r\n      }\r\n      tableRef.current?.setDataFormated(data);\r\n    }, [data]);\r\n\r\n    function customWidth(blick: boolean) {\r\n      if (size === \"large\") {\r\n        return blick ? \"851px\" : \"850px\";\r\n      } else if (size === \"medium\") {\r\n        return blick ? \"651px\" : \"650px\";\r\n      } else {\r\n        return blick ? \"451px\" : \"450px\";\r\n      }\r\n    }\r\n\r\n    const handleMouseDown = (e: any) => {\r\n      if (!modalRef.current) return;\r\n\r\n      isMoving.current = true;\r\n      offset.current = {\r\n        x: e.clientX - modalRef.current.offsetLeft,\r\n        y: e.clientY - modalRef.current.offsetTop,\r\n      };\r\n\r\n      document.addEventListener(\"mousemove\", handleMouseMove);\r\n      document.addEventListener(\"mouseup\", handleMouseUp);\r\n    };\r\n\r\n    // Move modal with mouse\r\n    const handleMouseMove = (e: any) => {\r\n      if (!isMoving.current || !modalRef.current) return;\r\n\r\n      modalRef.current.style.left = `${e.clientX - offset.current.x}px`;\r\n      modalRef.current.style.top = `${e.clientY - offset.current.y}px`;\r\n    };\r\n\r\n    // Stop moving when releasing mouse\r\n    const handleMouseUp = () => {\r\n      isMoving.current = false;\r\n      document.removeEventListener(\"mousemove\", handleMouseMove);\r\n      document.removeEventListener(\"mouseup\", handleMouseUp);\r\n    };\r\n\r\n    return show ? (\r\n      ReactDOM.createPortal(\r\n        <div id=\"modal-inject\">\r\n          <div\r\n            style={{\r\n              position: \"fixed\",\r\n              top: 0,\r\n              bottom: 0,\r\n              left: 0,\r\n              right: 0,\r\n              background: \"transparent\",\r\n              zIndex: \"88\",\r\n            }}\r\n            onClick={() => {\r\n              setBlick(true);\r\n              setTimeout(() => {\r\n                setBlick(false);\r\n              }, 250);\r\n            }}\r\n          ></div>\r\n\r\n          <div\r\n            ref={modalRef}\r\n            style={{\r\n              background: \"#F1F1F1\",\r\n              width: customWidth(blick),\r\n              height: blick ? \"501px\" : \"500px\",\r\n              position: \"absolute\",\r\n              zIndex: 111111,\r\n              top: \"50%\",\r\n              left: \"50%\",\r\n              transform: \"translate(-50%,-50%)\",\r\n              boxShadow: \"3px 6px 32px -7px rgba(0,0,0,0.75)\",\r\n              boxSizing: \"border-box\",\r\n              display: \"flex\",\r\n              flexDirection: \"column\",\r\n            }}\r\n          >\r\n            {isLoading && <Loading />}\r\n            <div\r\n              style={{\r\n                height: \"22px\",\r\n                background: \"white\",\r\n                display: \"flex\",\r\n                justifyContent: \"space-between\",\r\n                padding: \"5px\",\r\n                position: \"relative\",\r\n                alignItems: \"center\",\r\n                cursor: \"grab\",\r\n              }}\r\n              onMouseDown={handleMouseDown}\r\n            >\r\n              <span style={{ fontSize: \"13px\", fontWeight: \"bold\" }}>\r\n                Search\r\n              </span>\r\n              <button\r\n                className=\"btn-check-exit-modal\"\r\n                style={{\r\n                  padding: \"0 5px\",\r\n                  borderRadius: \"0px\",\r\n                  background: \"white\",\r\n                  color: \"black\",\r\n                  height: \"22px\",\r\n                  position: \"absolute\",\r\n                  top: 0,\r\n                  right: 0,\r\n                }}\r\n                onClick={() => {\r\n                  closeModal();\r\n                }}\r\n              >\r\n                <CloseIcon sx={{ fontSize: \"22px\" }} />\r\n              </button>\r\n            </div>\r\n            <div\r\n              style={{\r\n                padding: \"5px\",\r\n              }}\r\n            >\r\n              <TextInput\r\n                containerStyle={{\r\n                  width: \"100%\",\r\n                }}\r\n                label={{\r\n                  title: \"Search : \",\r\n                  style: {\r\n                    fontSize: \"12px\",\r\n                    fontWeight: \"bold\",\r\n                    width: \"70px\",\r\n                    display: \"none\",\r\n                  },\r\n                }}\r\n                input={{\r\n                  type: \"text\",\r\n                  style: { width: \"100%\" },\r\n                  onKeyDown: async (e) => {\r\n                    if (e.code === \"NumpadEnter\" || e.code === \"Enter\") {\r\n                      _searchInputValueCache = e.currentTarget.value;\r\n                      mutate({ search: e.currentTarget.value });\r\n                    }\r\n\r\n                    if (e.code === \"ArrowDown\") {\r\n                      const td = document.querySelector(\r\n                        `.td.row-0`\r\n                      ) as HTMLTableDataCellElement;\r\n                      if (td) {\r\n                        const parentElement =\r\n                          tableRef.current.getParentElement();\r\n\r\n                        td.focus({\r\n                          preventScroll: true,\r\n                        });\r\n                        parentElement.style.overflow = \"hidden\";\r\n                        wait(100).then(() => {\r\n                          parentElement.style.overflow = \"auto\";\r\n                        });\r\n                      }\r\n                      tableRef.current?._setSelectedRow(0);\r\n                    }\r\n                  },\r\n                  onInput: (e) => {\r\n                    if (e.currentTarget.value === \"\") {\r\n                      mutate({ search: \"\" });\r\n                    }\r\n                  },\r\n                }}\r\n                inputRef={searchInputRef as any}\r\n                icon={<SearchIcon sx={{ fontSize: \"18px\" }} />}\r\n                onIconClick={async (e) => {\r\n                  e.preventDefault();\r\n                  if (searchInputRef.current)\r\n                    _searchInputValueCache = searchInputRef.current.value;\r\n\r\n                  mutate({ search: searchInputRef.current?.value });\r\n                }}\r\n              />\r\n            </div>\r\n            <div\r\n              style={{\r\n                flex: 1,\r\n              }}\r\n            >\r\n              <DataGridViewReact\r\n                columns={column}\r\n                height={\"100%\"}\r\n                ref={tableRef}\r\n                getSelectedItem={getSelectedItem}\r\n                onKeyDown={onKeyDown}\r\n                focusElementOnMaxTop={() => {\r\n                  searchInputRef.current?.focus();\r\n                }}\r\n              />\r\n            </div>\r\n            <div style={{ padding: \"0 10px\" }}>\r\n              <span style={{ fontSize: \"13px\", fontWeight: \"bold\" }}>\r\n                Records: Top {data.length}\r\n              </span>\r\n            </div>\r\n            <style>\r\n              {`\r\n                                    .btn-check-exit-modal:hover{\r\n                                        background:red !important;\r\n                                        color:white !important;\r\n                                    }\r\n                                `}\r\n            </style>\r\n          </div>\r\n        </div>,\r\n        document.getElementById(\"modal-portal\") as HTMLElement\r\n      )\r\n    ) : (\r\n      <></>\r\n    );\r\n  };\r\n\r\n  return {\r\n    openModal,\r\n    closeModal,\r\n    UpwardTableModalSearch,\r\n    searchInputRef,\r\n  };\r\n};\r\n","import Swal from \"sweetalert2\";\n\nexport function codeCondfirmationAlert(props: {\n  cb: (userCodeConfirmation: string) => void;\n  isUpdate: boolean;\n  isConfirm?: () => void;\n  isDeclined?: () => void;\n  text?: string;\n  title?: string;\n  saveTitle?: string;\n}) {\n  Swal.fire({\n    title: props?.title ? props?.title :`Are you sure!`,\n    html: props?.text\n      ? props?.text\n      : props.isUpdate\n      ? `Are you sure you want to make this change?`\n      : \"Are you sure you want to delete this?\",\n    icon: \"warning\",\n    input: \"text\",\n    inputAttributes: {\n      autocapitalize: \"off\",\n    },\n    showCancelButton: true,\n    confirmButtonText: props?.saveTitle ? props?.saveTitle : \"Save\",\n    confirmButtonColor: \"green\",\n    showLoaderOnConfirm: true,\n    preConfirm: async (userCodeConfirmation) => {\n      try {\n        props.cb(userCodeConfirmation);\n      } catch (error) {\n        Swal.showValidationMessage(`\n            Request failed: ${error}\n          `);\n      }\n    },\n    allowOutsideClick: () => !Swal.isLoading(),\n  }).then((result) => {\n    if (result.isConfirmed) {\n      if (props.isConfirm) {\n        return props.isConfirm();\n      }\n    }\n    if (props.isDeclined) {\n      props.isDeclined();\n    }\n  });\n}\n\nexport function saveCondfirmationAlert(props: {\n  isConfirm?: () => void;\n  isDeclined?: () => void;\n  text?: string;\n}) {\n  Swal.fire({\n    title: \"Are you sure?\",\n    text: props?.text ? props?.text : \"Do you want to proceed with saving?\",\n    icon: \"warning\",\n    showCancelButton: true,\n    confirmButtonColor: \"#3085d6\",\n    cancelButtonColor: \"#d33\",\n    confirmButtonText: \"Yes, save it!\",\n  }).then((result) => {\n    if (result.isConfirmed) {\n      if (props.isConfirm) {\n        return props.isConfirm();\n      }\n    }\n    if (props.isDeclined) {\n      props.isDeclined();\n    }\n  });\n}\n","export function isValidDate(dateString:string) {\r\n    // Ensure the date is in the correct format: YYYY-MM-DD\r\n     const regex = /^\\d{4}-\\d{2}-\\d{2}$/;\r\n     if (!regex.test(dateString)) {\r\n         return false;\r\n     }\r\n \r\n     // Extract the year, month, and day\r\n     const [year, month, day] = dateString.split(\"-\");\r\n \r\n     // Ensure year is a valid four-digit number and within a reasonable range\r\n     const parsedYear = parseInt(year);\r\n     if (parsedYear < 1000 || parsedYear > 2040) {\r\n         return false;\r\n     }\r\n \r\n     const date = new Date(dateString);\r\n     // Ensure the created date matches the parts we input, adjusting for overflow\r\n     return date.getFullYear() === parsedYear &&\r\n            date.getMonth() + 1 === parseInt(month) &&\r\n            date.getDate() === parseInt(day);\r\n }","import {\n  HtmlHTMLAttributes,\n  InputHTMLAttributes,\n  useId,\n  ReactNode,\n  useState,\n  LegacyRef,\n  TextareaHTMLAttributes,\n  CSSProperties,\n  forwardRef,\n  useImperativeHandle,\n} from \"react\";\nimport \"../Style/design.css\";\nimport { isValidDate } from \"../Lib/validateDate\";\nimport { format } from \"date-fns\";\nimport { wait } from \"../Lib/wait\";\n\ninterface TextInputProps {\n  input: InputHTMLAttributes<HTMLInputElement>;\n  label: HtmlHTMLAttributes<HTMLLabelElement>;\n  inputRef?: React.RefObject<HTMLInputElement | null>;\n  icon?: ReactNode; // New prop for the icon\n  iconPosition?: \"start\" | \"end\"; // New prop to choose icon position\n  onIconClick?: React.MouseEventHandler<HTMLDivElement> | undefined;\n  disableIcon?: boolean;\n  containerStyle?: CSSProperties;\n  offValidation?: boolean;\n}\n\ninterface TextAreaPrps {\n  textarea: TextareaHTMLAttributes<HTMLTextAreaElement>;\n  label: HtmlHTMLAttributes<HTMLLabelElement>;\n  _inputRef: LegacyRef<HTMLTextAreaElement>;\n  icon?: ReactNode; // New prop for the icon\n  iconPosition?: \"start\" | \"end\"; // New prop to choose icon position\n  onIconClick?: React.MouseEventHandler<HTMLDivElement> | undefined;\n  disableIcon?: boolean;\n  containerStyle?: CSSProperties;\n}\n\ninterface TextFormatedInputProps extends TextInputProps {\n  onChange?: React.ChangeEventHandler<HTMLInputElement> | undefined;\n  onBlur?: React.ChangeEventHandler<HTMLInputElement> | undefined;\n}\nexport function TextFormatedInput({\n  input,\n  label,\n  inputRef,\n  icon,\n  iconPosition = \"end\", // Default position is 'end'\n  disableIcon = false,\n  onIconClick = (e) => {},\n  onChange = (e) => {},\n  onBlur = (e) => {},\n  containerStyle,\n}: TextFormatedInputProps) {\n  // const [inputValue, setInputValue] = useState('');\n  const id = useId();\n\n  // Helper function to format numbers with commas\n  const formatNumber = (value: string) => {\n    if (!value) return value;\n\n    // Split the value into integer and decimal parts\n    const parts = value.split(\".\");\n\n    // Add commas to the integer part only\n    parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n\n    // Join the integer and decimal parts if decimal exists\n    return parts.join(\".\");\n  };\n\n  // Helper function to remove commas\n  const unformatNumber = (value: string) => {\n    return value.replace(/,/g, \"\");\n  };\n\n  // Function to ensure two decimal places\n  const ensureTwoDecimals = (value: string) => {\n    // If the value has no decimal part, append '.00'\n    if (!value.includes(\".\")) {\n      if (value === \"\") {\n        return \"0.00\";\n      } else {\n        return value + \".00\";\n      }\n    }\n\n    // If the value has one decimal place, append '0'\n    const parts = value.split(\".\");\n    if (parts[1].length === 1) {\n      return value + \"0\";\n    }\n\n    // If it already has two decimal places, return as is\n    return value;\n  };\n\n  const handleChange = (e: any) => {\n    let value = e.target.value;\n\n    // Remove commas for processing\n    value = unformatNumber(value);\n\n    // Allow only numbers, commas, and one decimal point\n    const regex = /^-?\\d+(,\\d{3})*(\\.\\d*)?$/;\n\n    // Remove commas for processing\n    value = unformatNumber(value);\n\n    // Check if the value is valid\n    if (value === \"\" || regex.test(value)) {\n      // Set the formatted value back in the input field\n      //setInputValue(formatNumber(value));\n      e.target.value = formatNumber(value);\n    } else {\n      const numbers = value.match(/\\d+/g);\n      if (numbers) {\n        const newV = numbers.join(\"\");\n        e.target.value = formatNumber(newV);\n      } else {\n        e.target.value = \"0\";\n      }\n    }\n  };\n\n  const handleBlur = (e: any) => {\n    let value = unformatNumber(e.target.value);\n\n    // Ensure the value has two decimal places\n    value = ensureTwoDecimals(value);\n\n    // Set the value with commas and .00 (if needed)\n    // setInputValue(formatNumber(value));\n    e.target.value = formatNumber(value);\n  };\n\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        alignItems: \"center\",\n        position: \"relative\",\n        ...containerStyle, // Enable absolute positioning for icon\n      }}\n    >\n      <label {...label} htmlFor={id}>\n        {label.title}\n      </label>\n      {icon && iconPosition === \"start\" && (\n        <div style={{ position: \"absolute\", left: \"8px\", zIndex: 1 }}>\n          {icon}\n        </div>\n      )}\n      <input\n        ref={inputRef}\n        id={id}\n        {...input}\n        type=\"text\"\n        style={{\n          height: \"100%\",\n          textAlign: \"right\",\n          ...input.style,\n        }}\n        onChange={(e) => {\n          handleChange(e);\n          onChange(e);\n        }}\n        onBlur={(e) => {\n          handleBlur(e);\n          onBlur(e);\n        }} // Add .00 on blur\n        onFocus={(e) => {\n          e.currentTarget.select();\n          if (input && input.onFocus) input.onFocus(e);\n        }}\n      />\n      {icon && iconPosition === \"end\" && (\n        <div\n          onClick={onIconClick}\n          style={{\n            position: \"absolute\",\n            right: \"2px\",\n            top: \"50%\",\n            transform: \"translateY(-50%)\",\n            zIndex: 1,\n            cursor: disableIcon ? \"none\" : \"pointer\",\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n            background: \"white\",\n            pointerEvents: disableIcon ? \"none\" : \"auto\",\n          }}\n        >\n          {icon}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport function TextInput({\n  input,\n  label,\n  inputRef,\n  icon,\n  iconPosition = \"end\", // Default position is 'end'\n  disableIcon = false,\n  containerStyle,\n  onIconClick = (e) => {},\n  offValidation = false\n}: TextInputProps) {\n  const id = useId();\n\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        alignItems: \"center\",\n        position: \"relative\",\n        ...containerStyle,\n      }}\n    >\n      <label {...label} htmlFor={id}>\n        {label.title}\n      </label>\n      {icon && iconPosition === \"start\" && (\n        <div style={{ position: \"absolute\", left: \"8px\", zIndex: 1 }}>\n          {icon}\n        </div>\n      )}\n      <input\n        ref={inputRef}\n        id={id}\n        {...input}\n        onBlur={(e) => {\n          if (input.type === \"month\" && !offValidation) {\n            if (!isValidDate(`${e.currentTarget.value}-01`)) {\n              alert(\n                `Invalid ${label.title\n                  ?.replace(/:/g, \"\")\n                  .trim()}!, Resetting date.`\n              );\n              e.currentTarget.value = format(new Date(), \"yyyy-MM\");\n              wait(100).then(() => {\n                inputRef?.current?.focus();\n              });\n              return;\n            }\n          }\n          if (input.type === \"date\" && !offValidation) {\n            if (!isValidDate(e.currentTarget.value)) {\n              alert(\n                `Invalid ${label.title\n                  ?.replace(/:/g, \"\")\n                  .trim()}!, Resetting date.`\n              );\n              e.currentTarget.value = format(new Date(), \"yyyy-MM-dd\");\n              wait(100).then(() => {\n                inputRef?.current?.focus();\n              });\n              return;\n            }\n          }\n          if (input && input.onBlur) input.onBlur(e);\n        }}\n        style={{\n          height: \"100%\",\n          ...input.style,\n        }}\n      />\n      {icon && iconPosition === \"end\" && (\n        <div\n          onClick={onIconClick}\n          style={{\n            position: \"absolute\",\n            right: \"2px\",\n            top: \"50%\",\n            transform: \"translateY(-50%)\",\n            zIndex: 1,\n            cursor: disableIcon ? \"none\" : \"pointer\",\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n            background: \"white\",\n            pointerEvents: disableIcon ? \"none\" : \"auto\",\n          }}\n        >\n          {icon}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport function TextAreaInput({\n  textarea,\n  label,\n  _inputRef,\n  icon,\n  iconPosition = \"end\", // Default position is 'end'\n  disableIcon = false,\n  onIconClick = (e) => {},\n  containerStyle,\n}: TextAreaPrps) {\n  const id = useId();\n\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        alignItems: \"center\",\n        position: \"relative\",\n        ...containerStyle, // Enable absolute positioning for icon\n      }}\n    >\n      <label {...label} htmlFor={id}>\n        {label.title}\n      </label>\n      {icon && iconPosition === \"start\" && (\n        <div style={{ position: \"absolute\", left: \"8px\", zIndex: 1 }}>\n          {icon}\n        </div>\n      )}\n      <textarea\n        ref={_inputRef}\n        id={id}\n        {...textarea}\n        style={{\n          height: \"100%\",\n          ...textarea.style,\n        }}\n      />\n      {icon && iconPosition === \"end\" && (\n        <div\n          onClick={onIconClick}\n          style={{\n            position: \"absolute\",\n            right: \"2px\",\n            top: \"50%\",\n            transform: \"translateY(-50%)\",\n            zIndex: 1,\n            cursor: disableIcon ? \"none\" : \"pointer\",\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n            background: \"white\",\n            pointerEvents: disableIcon ? \"none\" : \"auto\",\n          }}\n        >\n          {icon}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport const SelectInput = forwardRef(\n  (\n    {\n      select,\n      label,\n      selectRef,\n      datasource = [],\n      values = \"\",\n      display = \"\",\n      containerStyle,\n    }: {\n      selectRef?: React.RefObject<HTMLSelectElement | null>;\n      labelRef?: React.RefObject<HTMLLabelElement>;\n      select: InputHTMLAttributes<HTMLSelectElement>;\n      label: HtmlHTMLAttributes<HTMLLabelElement>;\n      datasource: Array<any>;\n      values: string;\n      display: string;\n      containerStyle?: React.CSSProperties | undefined;\n    },\n    ref: any\n  ) => {\n    const [_datasource, _setDataSource] = useState(datasource);\n    const id = useId();\n\n    useImperativeHandle(ref, () => ({\n      setDataSource: (_dataSource: any) => {\n        _setDataSource(_dataSource);\n      },\n      getDataSource: () => {\n        return _datasource;\n      },\n    }));\n\n    return (\n      <div\n        style={{\n          display: \"flex\",\n          alignItems: \"center\",\n          ...containerStyle,\n        }}\n      >\n        <label {...label} htmlFor={id}>\n          {label.title}\n        </label>\n        <select\n          {...select}\n          ref={selectRef}\n          className={`select ${select.className}`}\n          style={{\n            height: \"18px\",\n            ...select.style,\n          }}\n        >\n          {_datasource.map((itm, idx) => {\n            return (\n              <option key={idx} value={itm[values]}>\n                {itm[display]}\n              </option>\n            );\n          })}\n        </select>\n      </div>\n    );\n  }\n);\n\nexport function ButtonField({\n  buttonRetRef,\n  button,\n  tooltipText = \"\",\n  children,\n  disabled = false,\n}: {\n  buttonRetRef?: React.RefObject<HTMLButtonElement>;\n  button: HtmlHTMLAttributes<HTMLButtonElement>;\n  tooltipText: string;\n  children: React.ReactNode;\n  disabled?: boolean;\n}) {\n  return (\n    <div className=\"tooltip\">\n      <button\n        disabled={disabled}\n        {...button}\n        ref={buttonRetRef}\n        style={{\n          ...button.style,\n          cursor: \"pointer\",\n          background: !disabled ? \"transparent\" : \"#f1f1f1\",\n        }}\n        className=\"tooltip-button\"\n      >\n        {children}\n      </button>\n      {!disabled && <span className=\"tooltip-text\">{tooltipText}</span>}\n    </div>\n  );\n}\n"],"names":["DataGridViewReact","forwardRef","_ref","ref","columns","rows","height","getSelectedItem","onKeyDown","disbaleTable","isTableSelectable","_isTableSelectable","containerStyle","focusElementOnMaxTop","ActionComponent","_jsx","_Fragment","showSequence","parentElementRef","useRef","actionModalRef","checkboxRef","tbodyRef","data","setData","useState","column","setColumn","selectedRow","setSelectedRow","selectedRowIndex","setSelectedRowIndex","totalRowWidth","reduce","a","b","width","setIsTableSelectable","columnHeader","setColumnHeader","filter","itm","hide","hoveredColumn","setHoveredColumn","useEffect","length","useImperativeHandle","checkNoIsExist","checkNo","some","subArray","getData","newData","getColumns","resetTable","getSelectedRow","value","resetCheckBox","handleResetCheckBox","_setSelectedRow","param","setDataFormated","map","col","key","getDataFormatted","Check_No","Check_Date","Check_Amnt","BankName","Branch","Check_Remarks","Deposit_Slip","DateDeposit","OR_No","BankCode","getElementBody","current","getParentElement","forEach","checkbox","idx","checked","handleResetCheckBoxByIndex","_idx","handleRightClick","event","preventDefault","showModal","_jsxs","children","ActionModal","Component","closeModal","closeDelay","rowItm","style","overflow","position","pointerEvents","border","boxShadow","background","id","borderCollapse","top","zIndex","borderRight","fontSize","padding","textAlign","colItm","type","className","label","onMouseDown","e","startResize","index","stopPropagation","startX","clientX","startWidth","doDrag","moveEvent","newWidth","updatedColumns","stopDrag","document","removeEventListener","addEventListener","onMouseEnter","onMouseLeave","rowIdx","RowComponent","_ref2","cursor","margin","display","alignItems","justifyContent","CheckBoxSelection","readOnly","defaultValue","String","padStart","userSelect","colIdx","tabIndex","onDoubleClick","onClick","prev","Math","max","td","querySelector","focus","min","setTimeout","code","onContextMenu","_ref3","el","currentTarget","_ref4","handleOnSave","handleOnClose","hasSelectedRow","setShowModal","handleDelayClose","setHandleDelayClose","blick","setBlick","closeDelayRef","clsoeModal","window","bottom","left","right","transform","flexDirection","opacity","transition","fontWeight","borderRadius","color","CloseIcon","sx","_dataCache","_searchInputValueCache","useUpwardTableModalSearchSafeMode","_ref6","link","customWidth","onClose","size","show","setShow","searchInputRef","arguments","undefined","openModal","search","body","div","createElement","getElementById","removeChild","insertBefore","firstChild","wait","then","KeyboardEvent","bubbles","dispatchEvent","_searchInputRef$curre","UpwardTableModalSearch","modalRef","isMoving","offset","x","y","user","myAxios","useContext","UserContext","tableRef","isLoading","setIsLoading","mutate","variable","post","headers","Authorization","accessToken","response","_response$data","catch","err","console","log","finally","_tableRef$current","handleMouseMove","clientY","handleMouseUp","ReactDOM","boxSizing","Loading","offsetLeft","offsetTop","TextInput","title","input","async","_tableRef$current2","parentElement","preventScroll","onInput","inputRef","icon","SearchIcon","onIconClick","_searchInputRef$curre2","flex","_searchInputRef$curre3","codeCondfirmationAlert","props","Swal","html","text","isUpdate","inputAttributes","autocapitalize","showCancelButton","confirmButtonText","saveTitle","confirmButtonColor","showLoaderOnConfirm","preConfirm","cb","userCodeConfirmation","error","allowOutsideClick","result","isConfirmed","isConfirm","isDeclined","saveCondfirmationAlert","cancelButtonColor","isValidDate","dateString","test","year","month","day","split","parsedYear","parseInt","date","Date","getFullYear","getMonth","getDate","TextFormatedInput","iconPosition","disableIcon","onChange","onBlur","useId","formatNumber","parts","replace","join","unformatNumber","htmlFor","target","numbers","match","newV","handleChange","includes","ensureTwoDecimals","handleBlur","onFocus","select","offValidation","_label$title","_label$title2","alert","trim","format","_inputRef$current","_inputRef$current2","TextAreaInput","textarea","_inputRef","SelectInput","selectRef","datasource","values","_datasource","_setDataSource","setDataSource","_dataSource","getDataSource"],"sourceRoot":""}