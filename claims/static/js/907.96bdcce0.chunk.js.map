{"version":3,"file":"static/js/907.96bdcce0.chunk.js","mappings":"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","sources":["Component/Login.tsx"],"sourcesContent":["import { FormEvent, useContext, useState } from \"react\";\r\nimport \"../Style/Login.css\";\r\nimport { useMutation } from \"@tanstack/react-query\";\r\nimport { Loading } from \"./Loading\";\r\nimport { UserContext } from \"../App\";\r\nimport Swal from \"sweetalert2\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nfunction Login() {\r\n  const navigate = useNavigate();\r\n  const { myAxios, setUser } = useContext(UserContext);\r\n  const [showPassword, setShowPassword] = useState(false);\r\n  const [errors, setErrors] = useState({\r\n    username: false,\r\n    password: false,\r\n    success: false,\r\n    message: \"\",\r\n  });\r\n\r\n  const { mutate, isPending } = useMutation({\r\n    mutationKey: [\"login\"],\r\n    mutationFn: async (variables: { username: string; password: string }) => {\r\n      return await myAxios.post(\r\n        \"/login\",\r\n        {\r\n          username: variables.username,\r\n          password: variables.password,\r\n        },\r\n        { withCredentials: true }\r\n      );\r\n    },\r\n    onSuccess: (res) => {\r\n      setUser(res.data.user);\r\n      setErrors({\r\n        username: false,\r\n        password: false,\r\n        success: true,\r\n        message: res.data.message,\r\n      });\r\n      Swal.fire({\r\n        position: \"center\",\r\n        icon: \"success\",\r\n        title: res.data.message,\r\n        showConfirmButton: false,\r\n        timer: 800,\r\n      }).then(() => {\r\n        setUser(res.data.user);\r\n        window.localStorage.setItem(\"tab\", `0`);\r\n        navigate(`/${process.env.REACT_APP_DEPARTMENT}/dashboard`);\r\n      });\r\n    },\r\n  });\r\n\r\n  async function onSubmit(e: FormEvent) {\r\n    e.preventDefault();\r\n    const formData = new FormData(e.currentTarget as HTMLFormElement);\r\n    mutate({\r\n      username: formData.get(\"username\") as string,\r\n      password: formData.get(\"password\") as string,\r\n    });\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {isPending && <Loading />}\r\n\r\n      <div className=\"main-landing-page\">\r\n        <form className=\"content\" onSubmit={onSubmit}>\r\n          <img\r\n            alt=\"Upward Insurance\"\r\n            src={process.env.REACT_APP_IMAGE_URL + \"logo.png\"}\r\n            style={{ width: \"120px\", height: \"auto\", background: \"white\" }}\r\n          />\r\n          <h3 style={{ fontWeight: \"400\", marginBottom: \"30px\" }}>\r\n            LOGIN TO UPWARD INSURANCE\r\n          </h3>\r\n          <div className=\"content-field\">\r\n            <div>\r\n              <label htmlFor=\"username\"> USERNAME</label>\r\n              <input\r\n                autoFocus={true}\r\n                name=\"username\"\r\n                id=\"username\"\r\n                className={errors.username ? \"error\" : \"\"}\r\n                onFocus={() =>\r\n                  setErrors({\r\n                    username: false,\r\n                    password: false,\r\n                    success: false,\r\n                    message: \"\",\r\n                  })\r\n                }\r\n              />\r\n              {errors.username && (\r\n                <p className=\"warning-text\">\r\n                  {errors.username && errors.message}\r\n                </p>\r\n              )}\r\n            </div>\r\n          </div>\r\n          <div className=\"content-field\" style={{ marginTop: \"15px\" }}>\r\n            <div>\r\n              <label htmlFor=\"password\"> PASSWORD</label>\r\n              <input\r\n                name=\"password\"\r\n                id=\"password\"\r\n                type={showPassword ? \"text\" : \"password\"}\r\n                className={errors.password ? \"error\" : \"\"}\r\n                onFocus={() =>\r\n                  setErrors({\r\n                    username: false,\r\n                    password: false,\r\n                    success: false,\r\n                    message: \"\",\r\n                  })\r\n                }\r\n              />\r\n              {errors.password && (\r\n                <p className=\"warning-text\">{errors.message}</p>\r\n              )}\r\n            </div>\r\n          </div>\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              alignItems: \"center\",\r\n              columnGap: \"10px\",\r\n              marginTop: \"10px\",\r\n            }}\r\n          >\r\n            <input\r\n              name=\"showpass\"\r\n              id=\"showpass\"\r\n              type=\"checkbox\"\r\n              style={{ padding: \"0\", margin: 0 }}\r\n              onChange={(e) => {\r\n                setShowPassword(e.currentTarget?.checked);\r\n              }}\r\n            />\r\n            <label\r\n              htmlFor=\"showpass\"\r\n              style={{\r\n                fontSize: \"10px\",\r\n                cursor: \"pointer\",\r\n                padding: \"0\",\r\n                margin: 0,\r\n              }}\r\n            >\r\n              SHOW PASSWORD\r\n            </label>\r\n          </div>\r\n          <button>SUBMIT</button>\r\n        </form>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\nexport default Login;\r\n"],"names":["navigate","useNavigate","myAxios","setUser","useContext","UserContext","showPassword","setShowPassword","useState","errors","setErrors","username","password","success","message","mutate","isPending","useMutation","mutationKey","mutationFn","async","post","variables","withCredentials","onSuccess","res","data","user","Swal","position","icon","title","showConfirmButton","timer","then","window","localStorage","setItem","_jsxs","_Fragment","children","_jsx","Loading","className","onSubmit","e","preventDefault","formData","FormData","currentTarget","get","alt","src","process","style","width","height","background","fontWeight","marginBottom","htmlFor","autoFocus","name","id","onFocus","marginTop","type","display","alignItems","columnGap","padding","margin","onChange","_e$currentTarget","checked","fontSize","cursor"],"sourceRoot":""}